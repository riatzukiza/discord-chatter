{"author":"242516597170765824","bot":false,"channel":"408576171886903296","content":"```cs\n    class Program\n    {\n        private DiscordSocketClient _client;\n\n        // Discord.Net heavily utilizes TAP for async, so we create\n        // an asynchronous context from the beginning.\n        static void Main(string[] args)\n            => new Program().MainAsync().GetAwaiter().GetResult();\n\n        public async Task MainAsync()\n        {\n            _client = new DiscordSocketClient();\n\n            _client.Log += LogAsync;\n            _client.Ready += ReadyAsync;\n            _client.MessageReceived += MessageReceivedAsync;\n\n            // Tokens should be considered secret data, and never hard-coded.\n            await _client.LoginAsync(TokenType.Bot, \"token\");\n            await _client.StartAsync();\n\n            // Block the program until it is closed.\n            await Task.Delay(-1);\n        }\n\n        private Task LogAsync(LogMessage log)\n        {\n            Console.WriteLine(log.ToString());\n            return Task.CompletedTask;\n        }\n\n        // The Ready event indicates that the client has opened a\n        // connection and it is now safe to access the cache.\n        private Task ReadyAsync()\n        {\n            Console.WriteLine($\"{_client.CurrentUser} is connected!\");\n\n            return Task.CompletedTask;\n        }\n\n        // This is not the recommmended way to write a bot - consider\n        // reading over the Commands Framework sample.\n        private async Task MessageReceivedAsync(SocketMessage message)\n        {\n            // The bot should never respond to itself.\n            if (message.Author.Id == _client.CurrentUser.Id)\n                return;\n\n            if (message.Content == \"!ping\")\n                await message.Channel.SendMessageAsync(\"pong!\");\n        }\n    }```","created":1528268390281,"id":"453815263427559445","server":"381467097030459393"}